{
  "_args": [
    [
      {
        "raw": "paper",
        "scope": null,
        "escapedName": "paper",
        "name": "paper",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\testPaper"
    ]
  ],
  "_from": "paper@latest",
  "_id": "paper@0.11.3",
  "_inCache": true,
  "_location": "/paper",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/paper-0.11.3.tgz_1492960514941_0.06122035742737353"
  },
  "_npmUser": {
    "name": "lehni",
    "email": "juerg@scratchdisk.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "paper",
    "scope": null,
    "escapedName": "paper",
    "name": "paper",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/paper/-/paper-0.11.3.tgz",
  "_shasum": "f9206ccbe1026d2de50bcc63e06e59af98808ebf",
  "_shrinkwrap": null,
  "_spec": "paper",
  "_where": "D:\\testPaper",
  "browser": {
    "canvas": false,
    "jsdom": false,
    "jsdom/lib/jsdom/living/generated/utils": false,
    "source-map-support": false,
    "./dist/node/self.js": false,
    "./dist/node/extend.js": false
  },
  "bugs": {
    "url": "https://github.com/paperjs/paper.js/issues"
  },
  "contributors": [
    {
      "name": "Jürg Lehni",
      "email": "juerg@scratchdisk.com",
      "url": "http://scratchdisk.com"
    },
    {
      "name": "Jonathan Puckey",
      "email": "jonathan@studiomoniker.com",
      "url": "http://studiomoniker.com"
    }
  ],
  "dependencies": {},
  "description": "The Swiss Army Knife of Vector Graphics Scripting",
  "devDependencies": {
    "acorn": "~7.1.1",
    "canvas": "^1.3.5",
    "del": "^2.2.1",
    "gulp": "^3.9.1",
    "gulp-cached": "^1.1.0",
    "gulp-git-streamed": "^1.8.0",
    "gulp-jshint": "^2.0.0",
    "gulp-json-editor": "^2.2.1",
    "gulp-prepro": "^2.4.0",
    "gulp-qunits": "^2.1.1",
    "gulp-rename": "^1.2.2",
    "gulp-shell": "^0.5.2",
    "gulp-symlink": "^2.1.4",
    "gulp-uglify": "^1.5.4",
    "gulp-uncomment": "^0.3.0",
    "gulp-util": "^3.0.7",
    "gulp-webserver": "^0.9.1",
    "gulp-whitespace": "^0.1.0",
    "gulp-zip": "^3.2.0",
    "husky": "^0.11.4",
    "jsdom": "^9.4.0",
    "jshint": "^2.9.2",
    "jshint-summary": "^0.4.0",
    "merge-stream": "^1.0.0",
    "minimist": "^1.2.0",
    "prepro": "^2.4.0",
    "qunitjs": "^1.23.0",
    "require-dir": "^0.3.0",
    "resemblejs": "^2.2.1",
    "run-sequence": "^1.2.2",
    "source-map-support": "^0.4.0",
    "stats.js": "0.16.0",
    "straps": "^3.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "f9206ccbe1026d2de50bcc63e06e59af98808ebf",
    "tarball": "https://registry.npmjs.org/paper/-/paper-0.11.3.tgz"
  },
  "engines": {
    "node": ">=4.0.0 <8.0.0"
  },
  "files": [
    "AUTHORS.md",
    "CHANGELOG.md",
    "dist/",
    "examples/",
    "LICENSE.txt",
    "README.md"
  ],
  "gitHead": "48c8eacf0b8dacfd84e64117b5a80ec76aea835f",
  "homepage": "http://paperjs.org",
  "keywords": [
    "vector",
    "graphic",
    "graphics",
    "2d",
    "geometry",
    "bezier",
    "curve",
    "curves",
    "path",
    "paths",
    "canvas",
    "svg",
    "paper",
    "paper.js",
    "paperjs"
  ],
  "license": "MIT",
  "main": "dist/paper-full.js",
  "maintainers": [
    {
      "name": "lehni",
      "email": "juerg@scratchdisk.com"
    }
  ],
  "name": "paper",
  "optionalDependencies": {},
  "readme": "# Paper.js - The Swiss Army Knife of Vector Graphics Scripting [![Build Status](https://travis-ci.org/paperjs/paper.js.svg?branch=develop)](https://travis-ci.org/paperjs/paper.js) [![NPM](https://img.shields.io/npm/v/paper.svg)](https://www.npmjs.com/package/paper) ![Bower](https://img.shields.io/bower/v/paper.svg)\n\nIf you want to work with Paper.js, simply download the latest \"stable\" version\nfrom [http://paperjs.org/download/](http://paperjs.org/download/)\n\n- Website: <http://paperjs.org/>\n- Discussion forum: <http://groups.google.com/group/paperjs>\n- Mainline source code: <https://github.com/paperjs/paper.js>\n- Twitter: [@paperjs](http://twitter.com/paperjs)\n- Latest releases: <http://paperjs.org/download/>\n- Pre-built development versions: [`prebuilt/module`](https://github.com/paperjs/paper.js/tree/prebuilt/module)\nand [`prebuilt/dist`](https://github.com/paperjs/paper.js/tree/prebuilt/dist) branches.\n\n## Installing Paper.js\n\nThe recommended way to install and maintain Paper.js as a dependency in your\nproject is through the [Node.js Package Manager (NPM)](https://www.npmjs.com/)\nfor browsers, Node.js or Electron, as well as through Bower for browsers.\n\nIf NPM or Bower is already installed, simply type one of these\ncommands in your project folder:\n\n```sh\nnpm install paper\n# Or:\nbower install paper\n```\n\nUpon execution, you will find a `paper` folder inside the project's\n`node_modules` / `bower_components` folder.\n\nFor more information on how to install Node.js and NPM, read the chapter\n[Installing Node.js and NPM](#installing-nodejs-and-npm).\n\n### Which Version to Use?\n\nThe various distributions come with two different pre-build versions of\nPaper.js, in minified and normal variants:\n\n- `paper-full.js` – The full version for the browser, including PaperScript\n  support and Acorn.js\n- `paper-core.js` – The core version for the browser, without PaperScript\n  support nor Acorn.js. You can use this to shave off some bytes and compilation\n  time when working with JavaScript directly.\n\n### Installing Node.js and NPM\n\nNode.js comes with the Node Package Manager (NPM). There are many tutorials\nexplaining the different ways to install Node.js on different platforms. It is\ngenerally not recommended to install Node.js through OS-supplied package\nmanagers, as the its development cycles move fast and these versions are often\nout-of-date.\n\nOn macOS, [Homebrew](http://brew.sh/) is a good option if one version of\nNode.js that is kept up to date with `brew upgrade` is enough:  \n<http://treehouse.github.io/installation-guides/mac/node-mac.html>\n\n[NVM](https://github.com/creationix/nvm) can be used instead to install and\nmaintain multiple versions of Node.js on the same platform, as often required by\ndifferent projects:  \n<https://nodesource.com/blog/installing-node-js-tutorial-using-nvm-on-mac-os-x-and-ubuntu/>\n\nHomebrew is recommended on macOS also if you intend to install Paper.js with\nrendering to the Canvas on Node.js, as described in the next paragraph.\n\nFor Linux, see <http://nodejs.org/download/> to locate 32-bit and 64-bit Node.js\nbinaries as well as sources, or use NVM, as described in the paragraph above.\n\n### Installing Paper.js for Node.js\n\nPaper.js comes in three different versions on NPM: `paper`, `paper-jsdom` and\n`paper-jsdom-canvas`. Depending on your use case, you need to required a\ndifferent one:\n\n- `paper` is the main library, and can be used directly in a browser\n  context, e.g. a web browser or worker.\n- `paper-jsdom` is a shim module for Node.js, offering headless use with SVG\n  importing and exporting through [jsdom](https://github.com/tmpvar/jsdom).\n- `paper-jsdom-canvas` is a shim module for Node.js, offering canvas rendering\n  through [Node-Canvas](https://github.com/Automattic/node-canvas) as well as\n  SVG importing and exporting through [jsdom](https://github.com/tmpvar/jsdom).\n\nIn order to install `paper-jsdom-canvas`, you need the [Cairo Graphics\nlibrary](http://cairographics.org/) installed in your system:\n\n##### Installing Cairo and Pango on macOS:\n\nThe easiest way to install Cairo is through [Homebrew](http://brew.sh/), by\nissuing the command:\n\n    brew install cairo pango\n\nNote that currently there is an issue on macOS with Cairo. If the above causes\nerrors, the following will most likely fix it:\n\n    PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig/ npm install paper\n\nAlso, whenever you would like to update the modules, you will need to execute:\n\n    PKG_CONFIG_PATH=/opt/X11/lib/pkgconfig/ npm update\n\nIf you keep forgetting about this requirement, or would like to be able to type\nsimple and clean commands, add this to your `.bash_profile` file:\n\n    # PKG Config for Pango / Cairo\n    export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig\n\nAfter adding this line, your commands should work in the expected way:\n\n    npm install paper\n    npm update\n\n##### Installing Cairo, Pango and all other dependencies on Debian/Ubuntu Linux:\n\n    sudo apt-get install pkg-config libcairo2-dev libpango1.0-dev libssl-dev libjpeg62-dev libgif-dev\n\nYou might also need to install the build-essential package if you don't usually\nbuild from c++ sources:\n\n    sudo apt-get install build-essential\n\n##### After Cairo has been installed:\n\nYou should now be able to install the Paper.js module with jsdom and Canvas\nrendering from NPM:\n\n    npm install paper-jsdom-canvas\n\n### Installing Paper.js with Node-Canvas for Electron\n\n[Node-Canvas](https://github.com/Automattic/node-canvas) is a native dependency.\nIn order to build it for use of `paper-jsdom-canvas` in Electron, which is\nlikely to use a different version of V8 than the Node binary installed in your\nsystem, you need to manually specify the location of Electron’s headers. Follow\nthese steps to do so:\n\n[Electron — Using Native Node\nModules](https://electron.atom.io/docs/tutorial/using-native-node-modules/)\n \n## Development\n\nThe main Paper.js source tree is hosted on\n[GitHub](https://github.com/paperjs/paper.js/). `git` is required to create a\nclone of the repository, and can be easily installed through your preferred\npackage manager on your platform.\n\n### Get the Source\n\n    git clone --recursive git://github.com/paperjs/paper.js.git\n    cd paper.js\n\nTo refresh your clone and fetch changes from origin, run:\n\n    git fetch origin\n\nTo update the `jsdoc-toolkit` submodule, used to generate the documentation,\nrun:\n\n    git submodule update  --init --recursive\n\n### Setting Up For Building\n\nAs of 2016, Paper.js uses [Gulp.js](http://gulpjs.com/) for building, and has a\ncouple of dependencies as Bower and NPM modules. Read the chapter [Installing\nNode.js, NPM and Bower](#installing-nodejs-npm-and-bower) if you still need to\ninstall these.\n\nIn order to be able to build Paper.js, after checking out the repository, paper\nhas dependencies that need to be installed. Install them by issuing the\nfollowing commands from the Paper.js directory:\n\n    npm install\n\nIt is also recommended to install Gulp.js globally, so you can easier execute\nthe build commands from anywhere in the command line:\n\n    npm install -g gulp\n\n### Building the Library\n\nThe Paper.js sources are distributed across many separate files, organised in\nsubfolders inside the `src` folder. To compile them all into distributable\nfiles, you can run the `build` task:\n\n    gulp build\n\nYou will then find the built library files inside the `dist` folder, named\n`paper-full.js` and `paper-core.js`, along with their minified versions. Read\nmore about this in [Which Version to Use?](#which-version-to-use).\n\n### Running Directly from Separate Source Files\n\nAs a handy alternative to building the library after each change to try it out\nin your scripts, there is the `load` task, that replaces the built libraries\nwith symbolic links to the `scrc/load.js` script. This script then load the\nlibrary directly from all the separate source files in the `src` folder, through\nthe [Prepro.js](https://github.com/lehni/prepro.js) JavaScript preprocessing\nlibrary.\n\nThis means you can switch between loading from sources and loading a built\nlibrary simply by running.\n\n    gulp load\n\nAnd to go back to a built library\n\n    gulp build\n\nNote that your PaperScripts examples do not need to change, they can keep\nloading `dist/paper-full.js`, which will always do the right thing. Note also\nthat `src/load.js` handles both browsers and Node.js, as supported by Prepro.js.\n\n### Other Build Tasks\n\nCreate a final zipped distribution file inside the `dist` folder:\n\n    gulp dist\n\nAnd since `dist` is the default task, this is the same:\n\n    gulp\n\n### Branch structure\n\nSince the release of version `0.9.22`, Paper.js has adopted aspects of the Git-\nFlow workflow. All development is taking place in the\n[`develop`](https://github.com/paperjs/paper.js/tree/develop) branch, which is\nonly merged into [`master`](https://github.com/paperjs/paper.js/tree/master)\nwhen a new release occurs.\n\nAs of version `0.9.26`, the `dist` folder is excluded on all branches, and the\nbuilding is now part of the `npm publish` process by way of the `prepublish`\nscript.\n\nWe also offer prebuilt versions of the latest state of the `develop` branch on\n[`prebuilt/module`](https://github.com/paperjs/paper.js/tree/prebuilt/module)\nand [`prebuilt/dist`](https://github.com/paperjs/paper.js/tree/prebuilt/dist).\n\n### Building the Documentation\n\nSimilarly to building the library, you can run the `docs` task to build the\ndocumentation:\n\n    gulp docs\n\nYour docs will then be located at `dist/docs`.\n\n### Testing\n\nPaper.js was developed and tested from day 1 using proper unit testing through\njQuery's [Qunit](http://docs.jquery.com/Qunit). To run the tests after any\nchange to the library's source, simply open `index.html` inside the `test`\nfolder in your web browser. There should be a green bar at the top, meaning all\ntests have passed. If the bar is red, some tests have not passed. These will be\nhighlighted and become visible when scrolling down.\n\nIf you are testing on Chrome, some of the tests will fail due to the browser's\nCORS restrictions. In order to run the browser based tests on Chrome, you need\nto run a local web-server through Gulp.js. The following command will handle it\nfor you, and will also open the browser at the right address straight away:\n\n    gulp test:browser\n\nYou can also run the unit tests through PhantomJS in Gulp directly on the\ncommand line:\n\n    gulp test:phantom\n\nTo test the Node.js version of Paper.js, use this command:\n\n    gulp test:node\n\nAnd to test both the PhantomJS and Node.js environments together, simply run:\n\n    gulp test\n\n### Contributing\n\nThe main Paper.js source tree is hosted on GitHub, thus you should create a fork\nof the repository in which you perform development. See\n<http://help.github.com/forking/>.\n\nWe prefer that you send a [pull request on GitHub]\n(http://help.github.com/pull-requests/) which will then be merged into the\nofficial main line repository. You need to sign the Paper.js CLA to be able to\ncontribute (see below).\n\nAlso, in your first contribution, add yourself to the end of `AUTHORS.md` (which\nof course is optional).\n\n**Get the source (for contributing):**\n\nIf you want to contribute to the project you will have to [make a\nfork](http://help.github.com/forking/). Then do this:\n\n    git clone --recursive git@github.com:yourusername/paper.js.git\n    cd paper.js\n    git remote add upstream git://github.com/paperjs/paper.js.git\n\nTo then fetch changes from upstream, run\n\n    git fetch upstream\n\n#### Creating and Submitting a Patch\n\nAs mentioned above, we prefer that you send a\n[pull request](http://help.github.com/pull-requests/) on GitHub:\n\n1. Create a fork of the upstream repository by visiting\n   <https://github.com/paperjs/paper.js/fork>. If you feel insecure, here's a\n   great guide: <http://help.github.com/forking/>\n\n2. Clone of your repository: `git clone\n   https://yourusername@github.com/yourusername/paper.js.git`\n\n3. This is important: Create a so-called *topic branch* based on the `develop`\n   branch: `git checkout -tb name-of-my-patch develop` where `name-of-my-patch`\n   is a short but descriptive name of the patch you're about to create. Don't\n   worry about the perfect name though -- you can change this name at any time\n   later on.\n\n4. Hack! Make your changes, additions, etc., commit them then push them to your\n   GitHub fork: `git push origin name-of-my-patch`\n\n5. Send a pull request to the upstream repository's owner by visiting your\n   repository's site at GitHub (i.e. https://github.com/yourusername/paper.js)\n   and press the \"Pull Request\" button. Make sure you are creating the pull\n   request to the `develop` branch, not the `master` branch. Here's a good guide\n   on pull requests: <http://help.github.com/pull-requests/>\n\n##### Use one topic branch per feature:\n\nDon't mix different kinds of patches in the same branch. Instead, merge them all\ntogether into your `develop` branch (or develop everything in your `develop`\nbranch and then cherry-pick-and-merge into the different topic branches). Git\nprovides for an extremely flexible workflow, which in many ways causes more\nconfusion than it helps you when new to collaborative software development. The\nguides provided by GitHub at <http://help.github.com/> are a really good\nstarting point and reference. If you are fixing an issue, a convenient way to\nname the branch is to use the issue number as a prefix, like this: `git checkout\n-tb issue-937-feature-add-text-styling`.\n\n#### Contributor License Agreement\n\nBefore we can accept any contributions to Paper.js, you need to sign this\n[CLA](http://en.wikipedia.org/wiki/Contributor_License_Agreement):\n\n[Contributor License Agreement](https://spreadsheets.google.com/a/paperjs.org/spreadsheet/embeddedform?formkey=dENxd0JBVDY2REo3THVuRmh4YjdWRlE6MQ)\n\n> The purpose of this agreement is to clearly define the terms under which\n> intellectual property has been contributed to Paper.js and thereby allow us to\n> defend the project should there be a legal dispute regarding the software at\n> some future time.\n\nFor a list of authors and contributors, please see [AUTHORS]\n(https://github.com/paperjs/paper.js/blob/master/AUTHORS.md).\n\n## License\n\nDistributed under the MIT license. See [LICENSE]\n(https://github.com/paperjs/paper.js/blob/master/LICENSE.txt) for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/paperjs/paper.js.git"
  },
  "scripts": {
    "build": "gulp build",
    "dist": "gulp dist",
    "docs": "gulp docs",
    "jshint": "gulp jshint",
    "load": "gulp load",
    "precommit": "gulp jshint --branch develop",
    "prepush": "gulp test --branch develop",
    "test": "gulp test",
    "zip": "gulp zip"
  },
  "version": "0.11.3"
}
